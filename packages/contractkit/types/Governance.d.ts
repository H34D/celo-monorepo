/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class Governance extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    stageDurations(): TransactionObject<{
      approval: string
      referendum: string
      execution: string
      0: string
      1: string
      2: string
    }>

    refundedDeposits(arg0: string): TransactionObject<string>

    voters(
      arg0: string
    ): TransactionObject<{
      upvotedProposal: string
      mostRecentReferendumProposal: string
      0: string
      1: string
    }>

    emptyIndices(arg0: number | string): TransactionObject<string>

    dequeued(arg0: number | string): TransactionObject<string>

    getConstitution(
      destination: string,
      functionId: string | number[]
    ): TransactionObject<{
      0: string
      1: string
    }>

    proposalExists(proposalId: number | string): TransactionObject<boolean>

    getProposal(
      proposalId: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
      3: string
    }>

    getProposalTransaction(
      proposalId: number | string,
      index: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: (string)[]
    }>

    isApproved(proposalId: number | string): TransactionObject<boolean>

    getVoteTotals(
      proposalId: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getVoteRecord(
      account: string,
      index: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getUpvotes(proposalId: number | string): TransactionObject<string>

    getQueue(): TransactionObject<{
      0: (string)[]
      1: (string)[]
    }>

    getUpvotedProposal(account: string): TransactionObject<string>

    getMostRecentReferendumProposal(account: string): TransactionObject<string>

    isVoting(account: string): TransactionObject<boolean>

    isQueued(proposalId: number | string): TransactionObject<boolean>

    isProposalPassing(proposalId: number | string): TransactionObject<boolean>

    getDequeuedProposalStage(dequeueTime: number | string): TransactionObject<string>

    stageStartTime(dequeueTime: number | string, stage: number | string): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(
      registryAddress: string,
      _approver: string,
      _concurrentProposals: number | string,
      _minDeposit: number | string,
      _queueExpiry: number | string,
      _dequeueFrequency: number | string,
      approvalStageDuration: number | string,
      referendumStageDuration: number | string,
      executionStageDuration: number | string
    ): TransactionObject<void>

    setApprover(_approver: string): TransactionObject<void>

    setConcurrentProposals(_concurrentProposals: number | string): TransactionObject<void>

    setMinDeposit(_minDeposit: number | string): TransactionObject<void>

    setQueueExpiry(_queueExpiry: number | string): TransactionObject<void>

    setDequeueFrequency(_dequeueFrequency: number | string): TransactionObject<void>

    setApprovalStageDuration(approvalStageDuration: number | string): TransactionObject<void>

    setReferendumStageDuration(referendumStageDuration: number | string): TransactionObject<void>

    setExecutionStageDuration(executionStageDuration: number | string): TransactionObject<void>

    setConstitution(
      destination: string,
      functionId: string | number[],
      numerator: number | string,
      denominator: number | string
    ): TransactionObject<void>

    propose(
      values: (number | string)[],
      destinations: (string)[],
      data: (string | number[])[],
      dataLengths: (number | string)[]
    ): TransactionObject<string>

    upvote(
      proposalId: number | string,
      lesser: number | string,
      greater: number | string
    ): TransactionObject<boolean>

    revokeUpvote(lesser: number | string, greater: number | string): TransactionObject<boolean>

    approve(proposalId: number | string, index: number | string): TransactionObject<boolean>

    vote(
      proposalId: number | string,
      index: number | string,
      value: number | string
    ): TransactionObject<boolean>

    execute(proposalId: number | string, index: number | string): TransactionObject<boolean>

    withdraw(): TransactionObject<boolean>

    dequeueProposalsIfReady(): TransactionObject<void>

    concurrentProposals(): TransactionObject<string>
    approver(): TransactionObject<string>
    initialized(): TransactionObject<boolean>
    minDeposit(): TransactionObject<string>
    dequeueFrequency(): TransactionObject<string>
    registry(): TransactionObject<string>
    owner(): TransactionObject<string>
    queueExpiry(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
    lastDequeue(): TransactionObject<string>
    proposalCount(): TransactionObject<string>
    getApprovalStageDuration(): TransactionObject<string>
    getReferendumStageDuration(): TransactionObject<string>
    getExecutionStageDuration(): TransactionObject<string>
    getQueueLength(): TransactionObject<string>
    getDequeue(): TransactionObject<(string)[]>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    ApproverSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ConcurrentProposalsSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    MinDepositSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    QueueExpirySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    DequeueFrequencySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ApprovalStageDurationSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ReferendumStageDurationSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ExecutionStageDurationSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ConstitutionSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalQueued(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalUpvoted(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalUpvoteRevoked(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalDequeued(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalApproved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalVoted(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalExecuted(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ProposalExpired(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): Governance
}
