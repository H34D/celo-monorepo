/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class GasPriceMinimum extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    targetDensity(): TransactionObject<{
      numerator: string
      denominator: string
      0: string
      1: string
    }>

    adjustmentSpeed(): TransactionObject<{
      numerator: string
      denominator: string
      0: string
      1: string
    }>

    infrastructureFraction(): TransactionObject<{
      numerator: string
      denominator: string
      0: string
      1: string
    }>

    getGasPriceMinimum(tokenAddress: string): TransactionObject<string>

    getUpdatedGasPriceMinimum(
      blockGasTotal: number | string,
      blockGasLimit: number | string
    ): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(
      _registryAddress: string,
      initialGas: number | string,
      targetDensityNumerator: number | string,
      targetDensityDenominator: number | string,
      adjustmentSpeedNumerator: number | string,
      adjustmentSpeedDenominator: number | string,
      infrastructureFractionNumerator: number | string,
      infrastructureFractionDenominator: number | string
    ): TransactionObject<void>

    setAdjustmentSpeed(
      numerator: number | string,
      denominator: number | string
    ): TransactionObject<void>

    setTargetDensity(
      numerator: number | string,
      denominator: number | string
    ): TransactionObject<void>

    setInfrastructureFraction(
      numerator: number | string,
      denominator: number | string
    ): TransactionObject<void>

    updateGasPriceMinimum(
      blockGasTotal: number | string,
      blockGasLimit: number | string
    ): TransactionObject<string>

    initialized(): TransactionObject<boolean>
    gasPriceMinimum(): TransactionObject<string>
    registry(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    TargetDensitySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AdjustmentSpeedSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    InfrastructureFractionSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): GasPriceMinimum
}
