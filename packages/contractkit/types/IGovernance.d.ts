/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class IGovernance extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    getConstitution(
      arg0: string,
      arg1: string | number[]
    ): TransactionObject<{
      0: string
      1: string
    }>

    proposalExists(arg0: number | string): TransactionObject<boolean>

    getProposal(
      arg0: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
      3: string
    }>

    getProposalTransaction(
      arg0: number | string,
      arg1: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: (string)[]
    }>

    isApproved(arg0: number | string): TransactionObject<boolean>

    getVoteTotals(
      arg0: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getVoteRecord(
      arg0: string,
      arg1: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getUpvotes(arg0: number | string): TransactionObject<string>

    getQueue(): TransactionObject<{
      0: (string)[]
      1: (string)[]
    }>

    getUpvotedProposal(arg0: string): TransactionObject<string>

    getMostRecentReferendumProposal(arg0: string): TransactionObject<string>

    isVoting(arg0: string): TransactionObject<boolean>

    isQueued(arg0: number | string): TransactionObject<boolean>

    isProposalPassing(arg0: number | string): TransactionObject<boolean>

    setApprover(arg0: string): TransactionObject<void>

    setConcurrentProposals(arg0: number | string): TransactionObject<void>

    setMinDeposit(arg0: number | string): TransactionObject<void>

    setQueueExpiry(arg0: number | string): TransactionObject<void>

    setDequeueFrequency(arg0: number | string): TransactionObject<void>

    setApprovalStageDuration(arg0: number | string): TransactionObject<void>

    setReferendumStageDuration(arg0: number | string): TransactionObject<void>

    setExecutionStageDuration(arg0: number | string): TransactionObject<void>

    setConstitution(
      arg0: string,
      arg1: string | number[],
      arg2: number | string,
      arg3: number | string
    ): TransactionObject<void>

    propose(
      arg0: (number | string)[],
      arg1: (string)[],
      arg2: (string | number[])[],
      arg3: (number | string)[]
    ): TransactionObject<string>

    upvote(
      arg0: number | string,
      arg1: number | string,
      arg2: number | string
    ): TransactionObject<boolean>

    revokeUpvote(arg0: number | string, arg1: number | string): TransactionObject<boolean>

    approve(arg0: number | string, arg1: number | string): TransactionObject<boolean>

    execute(arg0: number | string, arg1: number | string): TransactionObject<boolean>

    withdraw(): TransactionObject<boolean>

    dequeueProposalsIfReady(): TransactionObject<void>

    getApprovalStageDuration(): TransactionObject<string>
    getReferendumStageDuration(): TransactionObject<string>
    getExecutionStageDuration(): TransactionObject<string>
    getQueueLength(): TransactionObject<string>
    getDequeue(): TransactionObject<(string)[]>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): IGovernance
}
