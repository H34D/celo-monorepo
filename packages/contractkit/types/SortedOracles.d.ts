/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class SortedOracles extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    isOracle(arg0: string, arg1: string): TransactionObject<boolean>

    oracles(arg0: string, arg1: number | string): TransactionObject<string>

    rates(
      arg0: string
    ): TransactionObject<{
      head: string
      tail: string
      medianKey: string
      numElements: string
      0: string
      1: string
      2: string
      3: string
    }>

    timestamps(
      arg0: string
    ): TransactionObject<{
      head: string
      tail: string
      medianKey: string
      numElements: string
      0: string
      1: string
      2: string
      3: string
    }>

    numRates(token: string): TransactionObject<string>

    medianRate(
      token: string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getRates(
      token: string
    ): TransactionObject<{
      0: (string)[]
      1: (string)[]
      2: (string)[]
      3: (string)[]
    }>

    numTimestamps(token: string): TransactionObject<string>

    medianTimestamp(token: string): TransactionObject<string>

    getTimestamps(
      token: string
    ): TransactionObject<{
      0: (string)[]
      1: (string)[]
      2: (string)[]
      3: (string)[]
    }>

    renounceOwnership(): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(_reportExpirySeconds: number | string): TransactionObject<void>

    setReportExpiry(_reportExpirySeconds: number | string): TransactionObject<void>

    addOracle(token: string, oracleAddress: string): TransactionObject<void>

    removeOracle(
      token: string,
      oracleAddress: string,
      index: number | string
    ): TransactionObject<void>

    removeExpiredReports(token: string, n: number | string): TransactionObject<void>

    report(
      token: string,
      numerator: number | string,
      denominator: number | string,
      lesserKey: string,
      greaterKey: string
    ): TransactionObject<void>

    initialized(): TransactionObject<boolean>
    reportExpirySeconds(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    OracleAdded(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OracleRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OracleReported(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OracleReportRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    MedianUpdated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ReportExpirySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): SortedOracles
}
