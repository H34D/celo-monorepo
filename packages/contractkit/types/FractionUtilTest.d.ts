/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class FractionUtilTest extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    reduce(
      numerator: number | string,
      denominator: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    equals(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<boolean>

    add(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    sub(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    mul(
      numerator: number | string,
      denominator: number | string,
      y: number | string
    ): TransactionObject<string>

    isGreaterThan(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<boolean>

    isGreaterThanOrEqualTo(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<boolean>

    isLessThan(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<boolean>

    isLessThanOrEqualTo(
      numeratorA: number | string,
      denominatorA: number | string,
      numeratorB: number | string,
      denominatorB: number | string
    ): TransactionObject<boolean>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): FractionUtilTest
}
