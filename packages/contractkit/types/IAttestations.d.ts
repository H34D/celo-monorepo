/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class IAttestations extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    getDataEncryptionKey(arg0: string): TransactionObject<(string)[]>

    getWalletAddress(arg0: string): TransactionObject<string>

    getAttestationRequestFee(arg0: string): TransactionObject<string>

    lookupAccountsForIdentifier(arg0: string | number[]): TransactionObject<(string)[]>

    getAttestationStats(
      arg0: string | number[],
      arg1: string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getAttestationState(
      arg0: string | number[],
      arg1: string,
      arg2: string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getAttestationRequestFeeToken(arg0: string): TransactionObject<string>

    getMostRecentAttestationRequest(arg0: string): TransactionObject<string>

    initialize(
      arg0: string,
      arg1: number | string,
      arg2: (string)[],
      arg3: (number | string)[]
    ): TransactionObject<void>

    setAttestationRequestFee(arg0: string, arg1: number | string): TransactionObject<void>

    request(arg0: string | number[], arg1: number | string, arg2: string): TransactionObject<void>

    reveal(
      arg0: string | number[],
      arg1: (string | number[])[],
      arg2: string,
      arg3: boolean
    ): TransactionObject<void>

    complete(
      arg0: string | number[],
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    revoke(arg0: string | number[], arg1: number | string): TransactionObject<void>

    withdraw(arg0: string): TransactionObject<void>

    setAttestationExpirySeconds(arg0: number | string): TransactionObject<void>

    setWalletAddress(arg0: string): TransactionObject<void>

    setAccount(arg0: (string | number[])[], arg1: string): TransactionObject<void>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): IAttestations
}
