/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class Validators extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    voters(arg0: string): TransactionObject<string>

    getValidator(
      account: string
    ): TransactionObject<{
      0: string
      1: string
      2: string
      3: (string)[]
      4: string
    }>

    getValidatorGroup(
      account: string
    ): TransactionObject<{
      0: string
      1: string
      2: string
      3: (string)[]
    }>

    getValidatorGroupVotes(): TransactionObject<{
      0: (string)[]
      1: (string)[]
    }>

    getVotesReceived(group: string): TransactionObject<string>

    getRegistrationRequirement(): TransactionObject<{
      0: string
      1: string
    }>

    isValidating(account: string): TransactionObject<boolean>

    isVoting(account: string): TransactionObject<boolean>

    isValidatorGroup(account: string): TransactionObject<boolean>

    isValidator(account: string): TransactionObject<boolean>

    meetsRegistrationRequirements(
      account: string,
      noticePeriod: number | string
    ): TransactionObject<boolean>

    renounceOwnership(): TransactionObject<void>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(
      registryAddress: string,
      _minElectableValidators: number | string,
      _maxElectableValidators: number | string,
      requirementValue: number | string,
      requirementNoticePeriod: number | string
    ): TransactionObject<void>

    setMinElectableValidators(_minElectableValidators: number | string): TransactionObject<boolean>

    setMaxElectableValidators(_maxElectableValidators: number | string): TransactionObject<boolean>

    setRegistrationRequirement(
      value: number | string,
      noticePeriod: number | string
    ): TransactionObject<boolean>

    registerValidator(
      identifier: string,
      name: string,
      url: string,
      publicKey: (string | number[])[],
      noticePeriod: number | string
    ): TransactionObject<boolean>

    deregisterValidator(index: number | string): TransactionObject<boolean>

    affiliate(group: string): TransactionObject<boolean>

    deaffiliate(): TransactionObject<boolean>

    registerValidatorGroup(
      identifier: string,
      name: string,
      url: string,
      noticePeriod: number | string
    ): TransactionObject<boolean>

    deregisterValidatorGroup(index: number | string): TransactionObject<boolean>

    addMember(validator: string): TransactionObject<boolean>

    removeMember(validator: string): TransactionObject<boolean>

    reorderMember(
      validator: string,
      lesserMember: string,
      greaterMember: string
    ): TransactionObject<boolean>

    vote(group: string, lesser: string, greater: string): TransactionObject<boolean>

    revokeVote(lesser: string, greater: string): TransactionObject<boolean>

    initialized(): TransactionObject<boolean>
    minElectableValidators(): TransactionObject<string>
    registry(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
    maxElectableValidators(): TransactionObject<string>
    getRegisteredValidators(): TransactionObject<(string)[]>
    getRegisteredValidatorGroups(): TransactionObject<(string)[]>
    getValidators(): TransactionObject<(string)[]>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    MinElectableValidatorsSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    MaxElectableValidatorsSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrationRequirementSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorRegistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorDeregistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorAffiliated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorDeaffiliated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupRegistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupDeregistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupMemberAdded(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupMemberRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupMemberReordered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupEmptied(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupVoteCast(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupVoteRevoked(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): Validators
}
